//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getWeatherForecast(body: GetForecastInputDto | undefined): Promise<GetForecastOutputDto> {
        let url_ = "http://localhost:7285/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetWeatherForecast(_response);
        });
    }

    protected processGetWeatherForecast(response: Response): Promise<GetForecastOutputDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetForecastOutputDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetForecastOutputDto>(null as any);
    }
}

export class ConditionDto implements IConditionDto {
    text?: string | undefined;
    icon?: string | undefined;
    code?: number;

    constructor(data?: IConditionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.text = _data["text"];
            this.icon = _data["icon"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): ConditionDto {
        data = typeof data === 'object' ? data : {};
        let result = new ConditionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        data["icon"] = this.icon;
        data["code"] = this.code;
        return data;
    }
}

export interface IConditionDto {
    text?: string | undefined;
    icon?: string | undefined;
    code?: number;
}

export class CurrentDto implements ICurrentDto {
    lastUpdatedEpoch?: number;
    lastUpdated?: string | undefined;
    tempC?: number;
    tempF?: number;
    isDay?: number;
    condition?: ConditionDto;
    windMph?: number;
    windKph?: number;
    windDegree?: number;
    windDir?: string | undefined;
    pressureMb?: number;
    pressureIn?: number;
    precipMm?: number;
    precipIn?: number;
    humidity?: number;
    cloud?: number;
    feelslikeC?: number;
    feelslikeF?: number;
    visKm?: number;
    visMiles?: number;
    uv?: number;
    gustMph?: number;
    gustKph?: number;

    constructor(data?: ICurrentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lastUpdatedEpoch = _data["lastUpdatedEpoch"];
            this.lastUpdated = _data["lastUpdated"];
            this.tempC = _data["tempC"];
            this.tempF = _data["tempF"];
            this.isDay = _data["isDay"];
            this.condition = _data["condition"] ? ConditionDto.fromJS(_data["condition"]) : <any>undefined;
            this.windMph = _data["windMph"];
            this.windKph = _data["windKph"];
            this.windDegree = _data["windDegree"];
            this.windDir = _data["windDir"];
            this.pressureMb = _data["pressureMb"];
            this.pressureIn = _data["pressureIn"];
            this.precipMm = _data["precipMm"];
            this.precipIn = _data["precipIn"];
            this.humidity = _data["humidity"];
            this.cloud = _data["cloud"];
            this.feelslikeC = _data["feelslikeC"];
            this.feelslikeF = _data["feelslikeF"];
            this.visKm = _data["visKm"];
            this.visMiles = _data["visMiles"];
            this.uv = _data["uv"];
            this.gustMph = _data["gustMph"];
            this.gustKph = _data["gustKph"];
        }
    }

    static fromJS(data: any): CurrentDto {
        data = typeof data === 'object' ? data : {};
        let result = new CurrentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lastUpdatedEpoch"] = this.lastUpdatedEpoch;
        data["lastUpdated"] = this.lastUpdated;
        data["tempC"] = this.tempC;
        data["tempF"] = this.tempF;
        data["isDay"] = this.isDay;
        data["condition"] = this.condition ? this.condition.toJSON() : <any>undefined;
        data["windMph"] = this.windMph;
        data["windKph"] = this.windKph;
        data["windDegree"] = this.windDegree;
        data["windDir"] = this.windDir;
        data["pressureMb"] = this.pressureMb;
        data["pressureIn"] = this.pressureIn;
        data["precipMm"] = this.precipMm;
        data["precipIn"] = this.precipIn;
        data["humidity"] = this.humidity;
        data["cloud"] = this.cloud;
        data["feelslikeC"] = this.feelslikeC;
        data["feelslikeF"] = this.feelslikeF;
        data["visKm"] = this.visKm;
        data["visMiles"] = this.visMiles;
        data["uv"] = this.uv;
        data["gustMph"] = this.gustMph;
        data["gustKph"] = this.gustKph;
        return data;
    }
}

export interface ICurrentDto {
    lastUpdatedEpoch?: number;
    lastUpdated?: string | undefined;
    tempC?: number;
    tempF?: number;
    isDay?: number;
    condition?: ConditionDto;
    windMph?: number;
    windKph?: number;
    windDegree?: number;
    windDir?: string | undefined;
    pressureMb?: number;
    pressureIn?: number;
    precipMm?: number;
    precipIn?: number;
    humidity?: number;
    cloud?: number;
    feelslikeC?: number;
    feelslikeF?: number;
    visKm?: number;
    visMiles?: number;
    uv?: number;
    gustMph?: number;
    gustKph?: number;
}

export class DayDto implements IDayDto {
    maxtempC?: number;
    maxtemp_f?: number;
    mintemp_C?: number;
    mintemp_f?: number;
    avgtemp_c?: number;
    avgtemp_f?: number;
    condition?: ConditionDto;
    uv?: number;

    constructor(data?: IDayDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxtempC = _data["maxtempC"];
            this.maxtemp_f = _data["maxtemp_f"];
            this.mintemp_C = _data["mintemp_C"];
            this.mintemp_f = _data["mintemp_f"];
            this.avgtemp_c = _data["avgtemp_c"];
            this.avgtemp_f = _data["avgtemp_f"];
            this.condition = _data["condition"] ? ConditionDto.fromJS(_data["condition"]) : <any>undefined;
            this.uv = _data["uv"];
        }
    }

    static fromJS(data: any): DayDto {
        data = typeof data === 'object' ? data : {};
        let result = new DayDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxtempC"] = this.maxtempC;
        data["maxtemp_f"] = this.maxtemp_f;
        data["mintemp_C"] = this.mintemp_C;
        data["mintemp_f"] = this.mintemp_f;
        data["avgtemp_c"] = this.avgtemp_c;
        data["avgtemp_f"] = this.avgtemp_f;
        data["condition"] = this.condition ? this.condition.toJSON() : <any>undefined;
        data["uv"] = this.uv;
        return data;
    }
}

export interface IDayDto {
    maxtempC?: number;
    maxtemp_f?: number;
    mintemp_C?: number;
    mintemp_f?: number;
    avgtemp_c?: number;
    avgtemp_f?: number;
    condition?: ConditionDto;
    uv?: number;
}

export class ForecastdayDto implements IForecastdayDto {
    date?: string | undefined;
    dateEpoch?: number;
    day?: DayDto;

    constructor(data?: IForecastdayDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.dateEpoch = _data["dateEpoch"];
            this.day = _data["day"] ? DayDto.fromJS(_data["day"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ForecastdayDto {
        data = typeof data === 'object' ? data : {};
        let result = new ForecastdayDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["dateEpoch"] = this.dateEpoch;
        data["day"] = this.day ? this.day.toJSON() : <any>undefined;
        return data;
    }
}

export interface IForecastdayDto {
    date?: string | undefined;
    dateEpoch?: number;
    day?: DayDto;
}

export class ForecastDto implements IForecastDto {
    forecastday?: ForecastdayDto[] | undefined;

    constructor(data?: IForecastDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["forecastday"])) {
                this.forecastday = [] as any;
                for (let item of _data["forecastday"])
                    this.forecastday!.push(ForecastdayDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ForecastDto {
        data = typeof data === 'object' ? data : {};
        let result = new ForecastDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.forecastday)) {
            data["forecastday"] = [];
            for (let item of this.forecastday)
                data["forecastday"].push(item.toJSON());
        }
        return data;
    }
}

export interface IForecastDto {
    forecastday?: ForecastdayDto[] | undefined;
}

export class GetForecastInputDto implements IGetForecastInputDto {
    city?: string | undefined;
    days?: number;

    constructor(data?: IGetForecastInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.city = _data["city"];
            this.days = _data["days"];
        }
    }

    static fromJS(data: any): GetForecastInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetForecastInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["city"] = this.city;
        data["days"] = this.days;
        return data;
    }
}

export interface IGetForecastInputDto {
    city?: string | undefined;
    days?: number;
}

export class GetForecastOutputDto implements IGetForecastOutputDto {
    weather?: WeatherDto;
    createdAt?: Date;

    constructor(data?: IGetForecastOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.weather = _data["weather"] ? WeatherDto.fromJS(_data["weather"]) : <any>undefined;
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): GetForecastOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetForecastOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["weather"] = this.weather ? this.weather.toJSON() : <any>undefined;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IGetForecastOutputDto {
    weather?: WeatherDto;
    createdAt?: Date;
}

export class LocationDto implements ILocationDto {
    name?: string | undefined;
    region?: string | undefined;
    country?: string | undefined;
    lat?: number;
    lon?: number;
    tzId?: string | undefined;
    localtimeEpoch?: number;
    localtime?: string | undefined;

    constructor(data?: ILocationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.region = _data["region"];
            this.country = _data["country"];
            this.lat = _data["lat"];
            this.lon = _data["lon"];
            this.tzId = _data["tzId"];
            this.localtimeEpoch = _data["localtimeEpoch"];
            this.localtime = _data["localtime"];
        }
    }

    static fromJS(data: any): LocationDto {
        data = typeof data === 'object' ? data : {};
        let result = new LocationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["region"] = this.region;
        data["country"] = this.country;
        data["lat"] = this.lat;
        data["lon"] = this.lon;
        data["tzId"] = this.tzId;
        data["localtimeEpoch"] = this.localtimeEpoch;
        data["localtime"] = this.localtime;
        return data;
    }
}

export interface ILocationDto {
    name?: string | undefined;
    region?: string | undefined;
    country?: string | undefined;
    lat?: number;
    lon?: number;
    tzId?: string | undefined;
    localtimeEpoch?: number;
    localtime?: string | undefined;
}

export class WeatherDto implements IWeatherDto {
    location?: LocationDto;
    current?: CurrentDto;
    forecast?: ForecastDto;

    constructor(data?: IWeatherDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.location = _data["location"] ? LocationDto.fromJS(_data["location"]) : <any>undefined;
            this.current = _data["current"] ? CurrentDto.fromJS(_data["current"]) : <any>undefined;
            this.forecast = _data["forecast"] ? ForecastDto.fromJS(_data["forecast"]) : <any>undefined;
        }
    }

    static fromJS(data: any): WeatherDto {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["location"] = this.location ? this.location.toJSON() : <any>undefined;
        data["current"] = this.current ? this.current.toJSON() : <any>undefined;
        data["forecast"] = this.forecast ? this.forecast.toJSON() : <any>undefined;
        return data;
    }
}

export interface IWeatherDto {
    location?: LocationDto;
    current?: CurrentDto;
    forecast?: ForecastDto;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}